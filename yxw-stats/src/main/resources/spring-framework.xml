<beans xmlns="http://www.springframework.org/schema/beans" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

	<mvc:annotation-driven />
	<mvc:default-servlet-handler />
	<context:annotation-config />
	<!-- 注入spring助手类,以便直接在代码中获取bean对象 -->
	<bean class="com.yxw.framework.common.spring.ext.SpringContextHolder" />

	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.yxw">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
		<context:include-filter type="regex" expression=".*.controller.*" />
		<context:exclude-filter type="regex" expression=".*.framework.mvc.*" />
	</context:component-scan>

	<context:component-scan base-package="com.yxw">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
		<context:exclude-filter type="regex" expression=".*.framework.*.dao.*" />
		<context:exclude-filter type="regex" expression=".*.framework.*.service.*" />
	</context:component-scan>

	<!-- 加载资源文件 -->
	<bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 加载资源文件 -->
	<bean id="springProperty" class="com.yxw.framework.common.spring.ext.config.YxwPropertyPlaceholderConfigurer">
		<!-- 设置可以从JVM中取值 -->
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<!-- 忽略不存在的资源文件 -->
		<property name="ignoreResourceNotFound" value="false" />
		<property name="locations">
			<list>
				<value>classpath*:/cache/redis.properties</value>
				<value>classpath*:jdbc.properties</value>
				<value>classpath*:/task/task.properties</value>
			</list>
		</property>
	</bean>

	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- 文件下载需用用到byteArray这个Bean -->
				<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<!-- 配置StatFilter -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- 执行时间超过1秒的sql将被记录 -->
		<property name="slowSqlMillis" value="1000" />
		<property name="logSlowSql" value="true" />
		<!-- 合并sql -->
		<property name="mergeSql" value="true" />
	</bean>

	<!-- 配置输出日志 -->
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<!-- 输出可执行的SQL -->
		<property name="statementExecutableSqlLogEnable" value="true" />
		<!-- 所有连接上发生异常的日志 -->
		<property name="connectionLogErrorEnabled" value="true" />
		<!-- 所有Statement发生异常的日志 -->
		<property name="statementLogErrorEnabled" value="true" />
	</bean>

	<!-- 数据源配置, 使用 druid 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" 
			value="20" /> -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<!-- <ref bean="wall-filter" /> -->
				<ref bean="log-filter" />
			</list>
		</property>
	</bean>

	<!-- 启用spring对lob的支持 -->
	<!-- 定义一般数据库的lob处理器,包括db2,sqlserver,mysql,oracle10g以上的版本 都适用 <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" 
		lazy-init="true" /> -->
	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="com.yxw.framework.common.spring.ext.mybatis.bean.YXWSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 <property name="typeAliasesPackage" value="com.yxw"/> -->
		<property name="configLocations">
			<list>
				<value>classpath:/mybatis/mybatis-config.xml</value>
				<!-- <value>classpath:/mybatis-commons/mybatis-config.xml</value> -->
			</list>
		</property>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:/mybatis/mapper/*.xml</value>
				<!-- <value>classpath:/mybatis-commons/mapper/*.xml</value> -->
			</list>
		</property>

		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
							reasonable=true
							rowBoundsWithCount=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg index="1" value="BATCH" />
	</bean>

	<!-- 事务配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 定义事务管理器（声明式的事务） 开头的方法为只读事务,其它为新事物 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="batch*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="start*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="finish*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="run*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="pushMsg" propagation="SUPPORTS" read-only="true" no-rollback-for="java.lang.Exception" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 使用annotation定义事务 <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" /> -->

	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.yxw..*Service*.*(..))" advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.yxw..*Dao*.*(..))" advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.yxw..*Call*.*(..))" advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.yxw..*Collector*.*(..))" advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.yxw..*Task*.*(..))" advice-ref="txAdvice" />
	</aop:config>

	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJackson2HttpMessageConverter" />
			</list>
		</property>
	</bean>

	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="com.yxw.framework.mvc.view.CustomJspView" />
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />


	<!-- login 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/portal/**" />
			<mvc:exclude-mapping path="/signin/**" />
			<mvc:exclude-mapping path="/signout/**" />
			<mvc:exclude-mapping path="/submit/**" />
			<mvc:exclude-mapping path="/sys/**" />
			<mvc:exclude-mapping path="/login/**" />
			<mvc:exclude-mapping path="/confirm/**" />
			<mvc:exclude-mapping path="/assets/**" />
			<mvc:exclude-mapping path="/bootstrap/**" />
			<mvc:exclude-mapping path="/bootstrap-datepicker/**" />
			<mvc:exclude-mapping path="/js/**" />
			<mvc:exclude-mapping path="/css/**" />
			<mvc:exclude-mapping path="/images/**" />
			<bean class="com.yxw.interceptor.LoginInterceptor" />
		</mvc:interceptor>
		
		<mvc:interceptor>
			<mvc:mapping path="/portal/**" />
			<mvc:exclude-mapping path="/sys/**" />
			<mvc:exclude-mapping path="/assets/**" />
			<mvc:exclude-mapping path="/bootstrap/**" />
			<mvc:exclude-mapping path="/bootstrap-datepicker/**" />
			<mvc:exclude-mapping path="/js/**" />
			<mvc:exclude-mapping path="/css/**" />
			<mvc:exclude-mapping path="/images/**" />
			<bean class="com.yxw.interceptor.SignInInterceptor" />
		</mvc:interceptor>
		
	</mvc:interceptors>

	<!--引入redis 缓存配置 -->
	<import resource="classpath*:/cache/cache.xml" />

	<!--引入远程调用interface service -->
	<import resource="classpath*:/dubbo/dubbo-service.xml" />
	
	    <!--引入任务调度配置 -->
<!--     <import resource="classpath*:/task/yxw-task.xml" /> -->

</beans>